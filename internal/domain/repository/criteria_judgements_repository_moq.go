// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"dast-api/internal/domain/model"
	"sync"
)

var (
	lockCriteriaJudgementsRepositoryMockGet  sync.RWMutex
	lockCriteriaJudgementsRepositoryMockSave sync.RWMutex
)

// Ensure, that CriteriaJudgementsRepositoryMock does implement CriteriaJudgementsRepository.
// If this is not the case, regenerate this file with moq.
var _ CriteriaJudgementsRepository = &CriteriaJudgementsRepositoryMock{}

// CriteriaJudgementsRepositoryMock is a mock implementation of CriteriaJudgementsRepository.
//
//     func TestSomethingThatUsesCriteriaJudgementsRepository(t *testing.T) {
//
//         // make and configure a mocked CriteriaJudgementsRepository
//         mockedCriteriaJudgementsRepository := &CriteriaJudgementsRepositoryMock{
//             GetFunc: func(id string) (*model.CriteriaJudgements, error) {
// 	               panic("mock out the Get method")
//             },
//             SaveFunc: func(judgements *model.CriteriaJudgements) error {
// 	               panic("mock out the Save method")
//             },
//         }
//
//         // use mockedCriteriaJudgementsRepository in code that requires CriteriaJudgementsRepository
//         // and then make assertions.
//
//     }
type CriteriaJudgementsRepositoryMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(id string) (*model.CriteriaJudgements, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(judgements *model.CriteriaJudgements) error

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// ID is the id argument value.
			ID string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Judgements is the judgements argument value.
			Judgements *model.CriteriaJudgements
		}
	}
}

// Get calls GetFunc.
func (mock *CriteriaJudgementsRepositoryMock) Get(id string) (*model.CriteriaJudgements, error) {
	if mock.GetFunc == nil {
		panic("CriteriaJudgementsRepositoryMock.GetFunc: method is nil but CriteriaJudgementsRepository.Get was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockCriteriaJudgementsRepositoryMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockCriteriaJudgementsRepositoryMockGet.Unlock()
	return mock.GetFunc(id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedCriteriaJudgementsRepository.GetCalls())
func (mock *CriteriaJudgementsRepositoryMock) GetCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockCriteriaJudgementsRepositoryMockGet.RLock()
	calls = mock.calls.Get
	lockCriteriaJudgementsRepositoryMockGet.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *CriteriaJudgementsRepositoryMock) Save(judgements *model.CriteriaJudgements) error {
	if mock.SaveFunc == nil {
		panic("CriteriaJudgementsRepositoryMock.SaveFunc: method is nil but CriteriaJudgementsRepository.Save was just called")
	}
	callInfo := struct {
		Judgements *model.CriteriaJudgements
	}{
		Judgements: judgements,
	}
	lockCriteriaJudgementsRepositoryMockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	lockCriteriaJudgementsRepositoryMockSave.Unlock()
	return mock.SaveFunc(judgements)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedCriteriaJudgementsRepository.SaveCalls())
func (mock *CriteriaJudgementsRepositoryMock) SaveCalls() []struct {
	Judgements *model.CriteriaJudgements
} {
	var calls []struct {
		Judgements *model.CriteriaJudgements
	}
	lockCriteriaJudgementsRepositoryMockSave.RLock()
	calls = mock.calls.Save
	lockCriteriaJudgementsRepositoryMockSave.RUnlock()
	return calls
}
