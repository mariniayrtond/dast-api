// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"dast-api/internal/domain/model"
	"sync"
)

var (
	lockHierarchyRepositoryMockGet  sync.RWMutex
	lockHierarchyRepositoryMockSave sync.RWMutex
)

// Ensure, that HierarchyRepositoryMock does implement HierarchyRepository.
// If this is not the case, regenerate this file with moq.
var _ HierarchyRepository = &HierarchyRepositoryMock{}

// HierarchyRepositoryMock is a mock implementation of HierarchyRepository.
//
//     func TestSomethingThatUsesHierarchyRepository(t *testing.T) {
//
//         // make and configure a mocked HierarchyRepository
//         mockedHierarchyRepository := &HierarchyRepositoryMock{
//             GetFunc: func(id string) (*model.Hierarchy, error) {
// 	               panic("mock out the Get method")
//             },
//             SaveFunc: func(hierarchy *model.Hierarchy) error {
// 	               panic("mock out the Save method")
//             },
//         }
//
//         // use mockedHierarchyRepository in code that requires HierarchyRepository
//         // and then make assertions.
//
//     }
type HierarchyRepositoryMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(id string) (*model.Hierarchy, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(hierarchy *model.Hierarchy) error

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// ID is the id argument value.
			ID string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Hierarchy is the hierarchy argument value.
			Hierarchy *model.Hierarchy
		}
	}
}

// Get calls GetFunc.
func (mock *HierarchyRepositoryMock) Get(id string) (*model.Hierarchy, error) {
	if mock.GetFunc == nil {
		panic("HierarchyRepositoryMock.GetFunc: method is nil but HierarchyRepository.Get was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockHierarchyRepositoryMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockHierarchyRepositoryMockGet.Unlock()
	return mock.GetFunc(id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedHierarchyRepository.GetCalls())
func (mock *HierarchyRepositoryMock) GetCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockHierarchyRepositoryMockGet.RLock()
	calls = mock.calls.Get
	lockHierarchyRepositoryMockGet.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *HierarchyRepositoryMock) Save(hierarchy *model.Hierarchy) error {
	if mock.SaveFunc == nil {
		panic("HierarchyRepositoryMock.SaveFunc: method is nil but HierarchyRepository.Save was just called")
	}
	callInfo := struct {
		Hierarchy *model.Hierarchy
	}{
		Hierarchy: hierarchy,
	}
	lockHierarchyRepositoryMockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	lockHierarchyRepositoryMockSave.Unlock()
	return mock.SaveFunc(hierarchy)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedHierarchyRepository.SaveCalls())
func (mock *HierarchyRepositoryMock) SaveCalls() []struct {
	Hierarchy *model.Hierarchy
} {
	var calls []struct {
		Hierarchy *model.Hierarchy
	}
	lockHierarchyRepositoryMockSave.RLock()
	calls = mock.calls.Save
	lockHierarchyRepositoryMockSave.RUnlock()
	return calls
}
